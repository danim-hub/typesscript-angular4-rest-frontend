// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';
import { AppComponent } from './app.component';

// Routing
import { routing } from './app.routing';
#foreach ($entity in $selectedEntities)
#set ( $listComponentName = $entity.name + "ListComponent" )
#set ( $formComponentName = $entity.name + "FormComponent" )
#set ( $LCentityName = $fn.uncapitalize($entity.name) ) 
#set ( $listComponentPath = "./entities/" + $LCentityName + "/" + $LCentityName + "-list/" + $LCentityName + "-list.component" )
#set ( $formComponentPath = "./entities/" + $LCentityName + "/" + $LCentityName + "-form/" + $LCentityName + "-form.component" )

// $entity.name Components
import { $listComponentName } from '$listComponentPath';
import { $formComponentName } from '$formComponentPath';
#end 

// Other Components
import { NotFoundComponent } from './not-found/not-found.component';
import { AboutComponent } from './about/about.component';
import { DeleteDialogComponent } from './delete-dialog/delete-dialog.component';
import { HomeListComponent } from './home-list/home-list.component';
import { LoginComponent } from './login/login.component';

// Modules
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { SimpleNotificationsModule } from 'angular2-notifications';
import {
  MatIconModule,
  MatGridListModule,
  MatSelectModule,
  MatDialogModule,
  MatFormFieldModule,
  MatInputModule,
  MatCheckboxModule,
  MatDatepickerModule,
  MatNativeDateModule,
  MatTabsModule,
  MatCardModule,
  MatButtonModule
} from '@angular/material';

// Services
import { Configuration } from './app.configuration';
#foreach ($entity in $selectedEntities)
#set ( $baseServiceName = $entity.name + "Service" )
#set ( $LCentityName = $fn.uncapitalize($entity.name) )
#set ( $baseServicePath = "./entities/" + $LCentityName + "/services/" + $LCentityName + ".service" )
import { $baseServiceName } from '$baseServicePath';
#end
import { EmitterService } from './services/emitter.service';
import { NotificationService } from './services/notification.service';
import { PagerService } from './services/pager.service';

import { SocialLoginModule, AuthServiceConfig } from 'angularx-social-login';
import { GoogleLoginProvider, FacebookLoginProvider, LinkedInLoginProvider} from 'angularx-social-login';

const config = new AuthServiceConfig([
  {
    id: GoogleLoginProvider.PROVIDER_ID,
    provider: new GoogleLoginProvider('630249236149-3to3c5t9hdob9cfcepltpqtm0ov58lud.apps.googleusercontent.com')
  },
  {
    id: FacebookLoginProvider.PROVIDER_ID,
    provider: new FacebookLoginProvider('818717241849417') // Facebook-App-Id
  },
  {
    id: LinkedInLoginProvider.PROVIDER_ID,
    provider: new LinkedInLoginProvider('785s52qkyqiayd', false)
  }
]);
 
export function provideConfig() {
  return config;
}

@NgModule({
  declarations: [
    AppComponent,
#foreach ($entity in $selectedEntities)
    ${entity.name}ListComponent,
    ${entity.name}FormComponent,
#end 
    NotFoundComponent,
    AboutComponent,
    DeleteDialogComponent,
    HomeListComponent,
    LoginComponent
  ],
  entryComponents: [
    DeleteDialogComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    ReactiveFormsModule,
    HttpModule,
    routing,
    BrowserAnimationsModule,
    MatIconModule,
    MatGridListModule,
    MatSelectModule,
    MatDialogModule,
    MatFormFieldModule,
    MatCheckboxModule,
    MatInputModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatTabsModule,
    MatCardModule,
    MatButtonModule,
    SimpleNotificationsModule.forRoot(),
    SocialLoginModule
  ],
  providers: [
#foreach ($entity in $selectedEntities)
    ${entity.name}Service,
#end
    Configuration,
    EmitterService,
    NotificationService,
    PagerService,
    {
      provide: AuthServiceConfig,
      useFactory: provideConfig
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
